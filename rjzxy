# import numpy as np
# import torch
# import torch.nn as nn
# class Rj(nn.Module):
#     def __init__(self):
#         super().__init__()
#     def forward(self,input):
#         output=input+1
#         return output

# rj=Rj()
# x=torch.tensor(1)
# print(rj.forward(x))



# import torch
# device=torch.device('cuda')
# my_tensor=torch.tensor([[1,2,3],[4,5,6]],dtype=torch.float32,device=device,requires_grad=True)
# print(my_tensor)
# print(my_tensor.dtype)
# print(my_tensor.device)
# print(my_tensor.shape)
# print(my_tensor.requires_grad)
# x = torch.empty(size = (3,3))
# x = torch.zeros((3,3))
# x = torch.rand((3,3))
# x = torch .ones((3, 3))
# x = torch.eye(5,5)
# x = torch.arange(start=0, end=5, step=1)
# x = torch.linspace(start=0.1, end=1, steps=10)
# x = torch.empty(size=(1, 5)).normal_(mean=0, std=1)
# x = torch.empty(size=(1,5)).uniform_(0,1)
# x = torch.diag(torch.ones(3))

# tensor = torch.arange(4)
# print(tensor.bool())
# print(tensor.short())
# print(tensor.long())
# print(tensor.half())
# print(tensor.float())
# print(tensor.double())

# import numpy as np
# np_array = np.zeros((5,5))
# tensor = torch.from_numpy(np_array)



# import numpy as np
# import torch
# import torch.nn as nn

# import torch.optim
# import torchvision
# from torch.utils.data import DataLoader
# from torch.nn import  Conv2d,MaxPool2d,Flatten,Linear
# train_data = torchvision.datasets.CIFAR10(root='data',transform=torchvision.transforms.ToTensor(),download=True)
# train_loader = DataLoader(train_data,batch_size=64,shuffle=True,drop_last=True)

# class Tudui(nn.Module):
#     def __int__(self):
#         super().__init__()
#         self.model=nn.Sequential(
#             nn.Conv2d(3, 32, 5, padding=2),
#             nn.MaxPool2d(2),
#             nn.Conv2d(32, 32, 5, padding=2),
#             nn.MaxPool2d(2),
#             nn.Conv2d(32, 64, 5, padding=2),
#             nn.MaxPool2d(2),
#             nn.Flatten(),
#             nn.Linear(1024, 64),
#             nn.Linear(64, 10)
#         )


#     def forward(self,x):
#         output=self.model(x)
#         return output
# tudui=Tudui()
# cross=nn.CrossEntropyLoss()
# optim=torch.optim.SGD(params=tudui.parameters(),lr=1e-2)
# total_loss=0
# for epoch in range(20):
#     for data in train_loader:
#         img,label=data
#         output=tudui(img)
#         loss_fn=cross(output,label)

#         optim.zero_grad()
#         loss_fn.backward()
#         optim.step()
#     def test(loader,model):
#         correct=0
#         num=0
#         for data in loader:
#             img,label=data
#             output=model(img)
#             correct+=(output.argmax(1)==label).sum()
#             num+=output.size()
#         return correct/num
#     accuracy=test(test_loader,tudui)
# print(accuracy)
